Пример с лекции сморите в папке 13/simple-maven-project spring-examlpe

Разработать собственный Dependency Injection Framework.

1. Создать класс SimpleDIFramework, у которого будет поле "basePackagesToScan" - базовый package, в котором будут находиться классы.


2. Создать аннотацию @SimpleComponent - эта аннотация будет вешаться на класс и отмечать его, как кандидат на добавление в SimpleDIFramework

3. Создать аннотацию @AutowireSimpleComponent - эта аннотация будет вешаться на поле класса и отмечать, что в это поле должна быть вставлена зависимость из SimpleDIFramework.
Если компонента нужного класса не нашлось - нужно выкинуть исключение.

4. Создать аннотацию @AfterDependenciesInjected - эта аннотация будет вешаться на метод класса. Этот метод будет вызван, когда все зависимости класса установлены.





- Создать несколько склассов с @SimpleComponent , которые у которых есть зависимости на другие @SimpleComponent.
- У некоторых классов - добавить метод с @AfterDependenciesInjected, который использует зависимости
- Создать экземпляр SimpleDIFramework, убедиться, что все методы @AfterDependenciesInjected вызываются

например(все классы в com.example)


@SimpleComponent
class Cat {
 void meow() {
 print("Мяу");
 }
}

@SimpleComponent
class Dog {
 void gav() {
 print("Гав-гав!");
 }
}
@SimpleComponent
class Zoo() {
 @AutowireSimpleComponent
 private Cat cat;

 @AutowireSimpleComponent
 private Dog dog;



 @AfterDependenciesInjected
 private void makeNoise() {
 cat.meow();
 dog.gav();
 }

 void main() {
 new SimpleDIFramework("com.example");// на экран выводится "Мяу" и "Гав-гав!"
 }
}

Совет - для сканирования классов, помеченных какими-то определнными аннотациями советую использовать библиотеку https://github.com/ronmamo/reflections
Используйте Maven или Gradle для добавления зависимостей
new Reflections("com.example")
 .getTypesAnnotatedWith(SimpleComponent.class)
 .iterator().next();

 Важный момент: в этом задании будет очень сильно использоваться рефлексия - это нормально.
 Все "зависимости" должны быть созданы в единственном экземпляре.