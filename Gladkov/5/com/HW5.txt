Задание 5. Исключительный интерфейс.

Сегодня создаем элементы интерфейса и их взаимодействие.

Элементов у нас будет три:
- Button - кнопка.
- CheckBox - галка.  У Галки есть состояние - нажата или не нажата.
- TextField - поле для ввода текста. У поле есть состояние - введенный текст.


Кроме того, у каждого элемента есть:
- координаты левого верхнего угла: x,y
- ширина, высота. Положительные числа.
- название элемента (caption)
- Состояние включен\выключен.
Если элемент выключен, и с ним производится какое-то действие, то должно быть выкинуто ReadOnlyException

На некоторые элементы можно кликнуть:
- При клике на кнопку выполняется действие, определенное для этой кнопки. Это действие определяется создателем кнопки.
- При клике на галку - меняется её состояние на противоположное.
- При клике на поле для ввода ничего не происходит - делать его кликабельным не обязательно.

Есть класс UI,который хранит в себе массив элементов. В UI всего два метода:
- getAllElements - возвращает все элементы
- addElement - добавляет новый элемент в интерфейс.
 Если новый элемент пересекается с любым уже существующим элементом в интерфейсе - он не добавляется и выкидывается ELementsOverlapException
 с описанием, какой элемент не может быть добавлен и с каким элементом он пересекается.
- размер UI сцены - 100х100

 Задание:
 1. Создайте кнопку и поместите её в любое место интерфейса назовите её "Добавить элемент".
 2. Создайте два текстовых поля с названиям "Координата x для нового элемента" и "Координата y для нового элемента"
 3. При клике на кнопку в указанные координаты x и y (из текстовых полей) добавляется случайный элемент со случайными шириной и высотой:
   - Кнопка при клике на которую в консоль пишется сообщение "Нажата кнопка в <x,y>" с названием "Кнопка в <x,y>"
   - Галка со случайным начальным состоянием
   - Текстовое поле со случайным текстом длины от 1 до 10.

 4. Поместите в текстовые поля x,y случайные числа от 0 до 100.
 5. Нажмите на кнопку. Должен добавится какой-то элемент.
 6. Повторите предыдущие два пункта 10 раз. таким образом, у вас будет 10 попыток добавить элементы на случайные позиции.
 Если какой-то элемент не добавился из-за пересечений с существующими элементами - в консоль выведите надпись, с каким элементом произошло пересечение.

 7. Выведите все элементы, которые существуют на интерфесе в формате:
 [Галка\Кнопка\Текстовое поле] в координатах <x,y>, ширина <w>, высота <h>, Название: <caption>
 - Если на элемент можно кликнуть - кликните. Но не кликайте на кнопку из пункта 1.
 - Для всех галок выведите состояние (после клика)
 - Для всех текстовых полей выведите текст

 Рекомендации:
 - Создайте базовый класс Rectangle, описывающий свойства, иденые для всех фигур.
 - Создайте интерфейс Clickable с методом click() для фигур, которые поддерижвают клик (кнопка, галка).
 - Для определения поведения кнопки создайте интерфейс ButtonClickCallback с методом onButtonClick()
 Кнопка должна хранить экземпляр объекта, реализующего этот интерфейс и вызывать метод onButtonClick, при клике на кнопку
 Например

 class AddElementOnClick implements ButtonClickCallback {
      UI scene;
      AddElementOnClick(UI sceneToAddElements) {
             scene = sceneToAddElements;
      }
      @Override
      void onButtonClick() {
          Element toAdd = generateRandomElement();
          scene.add(toAdd);
      }
 }
 }

 class Button implements Clickable{
     ButtonClickCallback callback;

     Button(String caption, ButtonClickCallback callback) {
     ...
     }

     @Override
     void click() {
        callback.onButtonClick();

     }

 }

 main {
    Button b = new Button("Добавить элемент", new AddElementOnClick())


 }